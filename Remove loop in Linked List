Given a linked list of N nodes such that it may contain a loop.

A loop here means that the last node of the link list is connected to the node at position X(1-based index). If the link list does not have any loop, X=0.

Remove the loop from the linked list, if it is present, i.e. unlink the last node which is forming the loop.


Example 1:

Input:
N = 3
value[] = {1,3,4}
X = 2
Output: 1
Explanation: The link list looks like
1 -> 3 -> 4
     ^    |
     |____|    
A loop is present. If you remove it 
successfully, the answer will be 1. 



class ListNode:
    def __init__(self, value):
        self.value = value
        self.next = None

def detectAndRemoveLoop(head):
    if not head:
        return None

    slow = head
    fast = head
    loop_detected = False

    # Detect loop using Floyd's algorithm
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            loop_detected = True
            break

    # If loop detected, find the starting point of the loop
    if loop_detected:
        slow = head
        while slow != fast:
            slow = slow.next
            fast = fast.next

        # Remove the loop by making the next of the last node in the loop None
        while fast.next != slow:
            fast = fast.next
        fast.next = None

    return head

def printLinkedList(head):
    while head:
        print(head.value, end=" -> ")
        head = head.next
    print("None")

# Example usage:
if __name__ == "__main__":
    # Create a linked list with a loop
    node1 = ListNode(1)
    node2 = ListNode(3)
    node3 = ListNode(4)
    node1.next = node2
    node2.next = node3
    node3.next = node2  # Creating a loop

    # Detect and remove the loop
    head = detectAndRemoveLoop(node1)

    # Print the modified linked list
    printLinkedList(head)
